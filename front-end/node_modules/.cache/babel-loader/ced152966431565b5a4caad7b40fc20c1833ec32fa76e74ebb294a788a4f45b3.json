{"ast":null,"code":"const dateFormat = /\\d\\d\\d\\d-\\d\\d-\\d\\d/;\nconst timeFormat = /\\d\\d:\\d\\d/;\n\n/**\n * Formats a Date object as YYYY-MM-DD.\n *\n * This function is *not* exported because the UI should generally avoid working directly with Date instance.\n * You may export this function if you need it.\n *\n * @param date\n *  an instance of a date object\n * @returns {string}\n *  the specified Date formatted as YYYY-MM-DD\n */\nfunction asDateString(date) {\n  return `${date.getFullYear().toString(10)}-${(date.getMonth() + 1).toString(10).padStart(2, \"0\")}-${date.getDate().toString(10).padStart(2, \"0\")}`;\n}\n\n/**\n * Format a date string in ISO-8601 format (which is what is returned from PostgreSQL) as YYYY-MM-DD.\n * @param dateString\n *  ISO-8601 date string\n * @returns {*}\n *  the specified date string formatted as YYYY-MM-DD\n */\nexport function formatAsDate(dateString) {\n  return dateString.match(dateFormat)[0];\n}\n\n/**\n * Format a time string in HH:MM:SS format (which is what is returned from PostgreSQL) as HH:MM.\n * @param timeString\n *  HH:MM:SS time string\n * @returns {*}\n *  the specified time string formatted as YHH:MM.\n */\nexport function formatAsTime(timeString) {\n  return timeString.match(timeFormat)[0];\n}\n\n/**\n * Today's date as YYYY-MM-DD.\n * @returns {*}\n *  the today's date formatted as YYYY-MM-DD\n */\nexport function today() {\n  return asDateString(new Date());\n}\n\n/**\n * Subtracts one day to the specified date and return it in as YYYY-MM-DD.\n * @param currentDate\n *  a date string in YYYY-MM-DD format (this is also ISO-8601 format)\n * @returns {*}\n *  the date one day prior to currentDate, formatted as YYYY-MM-DD\n */\nexport function previous(currentDate) {\n  let [year, month, day] = currentDate.split(\"-\");\n  month -= 1;\n  const date = new Date(year, month, day);\n  date.setMonth(date.getMonth());\n  date.setDate(date.getDate() - 1);\n  return asDateString(date);\n}\n\n/**\n * Adds one day to the specified date and return it in as YYYY-MM-DD.\n * @param currentDate\n *  a date string in YYYY-MM-DD format (this is also ISO-8601 format)\n * @returns {*}\n *  the date one day after currentDate, formatted as YYYY-MM-DD\n */\nexport function next(currentDate) {\n  let [year, month, day] = currentDate.split(\"-\");\n  month -= 1;\n  const date = new Date(year, month, day);\n  date.setMonth(date.getMonth());\n  date.setDate(date.getDate() + 1);\n  return asDateString(date);\n}","map":{"version":3,"names":["dateFormat","timeFormat","asDateString","date","getFullYear","toString","getMonth","padStart","getDate","formatAsDate","dateString","match","formatAsTime","timeString","today","Date","previous","currentDate","year","month","day","split","setMonth","setDate","next"],"sources":["/Users/siangling/starter-restaurant-reservation/front-end/src/utils/date-time.js"],"sourcesContent":["const dateFormat = /\\d\\d\\d\\d-\\d\\d-\\d\\d/;\nconst timeFormat = /\\d\\d:\\d\\d/;\n\n/**\n * Formats a Date object as YYYY-MM-DD.\n *\n * This function is *not* exported because the UI should generally avoid working directly with Date instance.\n * You may export this function if you need it.\n *\n * @param date\n *  an instance of a date object\n * @returns {string}\n *  the specified Date formatted as YYYY-MM-DD\n */\nfunction asDateString(date) {\n  return `${date.getFullYear().toString(10)}-${(date.getMonth() + 1)\n    .toString(10)\n    .padStart(2, \"0\")}-${date.getDate().toString(10).padStart(2, \"0\")}`;\n}\n\n/**\n * Format a date string in ISO-8601 format (which is what is returned from PostgreSQL) as YYYY-MM-DD.\n * @param dateString\n *  ISO-8601 date string\n * @returns {*}\n *  the specified date string formatted as YYYY-MM-DD\n */\nexport function formatAsDate(dateString) {\n  return dateString.match(dateFormat)[0];\n}\n\n/**\n * Format a time string in HH:MM:SS format (which is what is returned from PostgreSQL) as HH:MM.\n * @param timeString\n *  HH:MM:SS time string\n * @returns {*}\n *  the specified time string formatted as YHH:MM.\n */\nexport function formatAsTime(timeString) {\n  return timeString.match(timeFormat)[0];\n}\n\n/**\n * Today's date as YYYY-MM-DD.\n * @returns {*}\n *  the today's date formatted as YYYY-MM-DD\n */\nexport function today() {\n  return asDateString(new Date());\n}\n\n/**\n * Subtracts one day to the specified date and return it in as YYYY-MM-DD.\n * @param currentDate\n *  a date string in YYYY-MM-DD format (this is also ISO-8601 format)\n * @returns {*}\n *  the date one day prior to currentDate, formatted as YYYY-MM-DD\n */\nexport function previous(currentDate) {\n  let [ year, month, day ] = currentDate.split(\"-\");\n  month -= 1;\n  const date = new Date(year, month, day);\n  date.setMonth(date.getMonth());\n  date.setDate(date.getDate() - 1);\n  return asDateString(date);\n}\n\n/**\n * Adds one day to the specified date and return it in as YYYY-MM-DD.\n * @param currentDate\n *  a date string in YYYY-MM-DD format (this is also ISO-8601 format)\n * @returns {*}\n *  the date one day after currentDate, formatted as YYYY-MM-DD\n */\nexport function next(currentDate) {\n  let [ year, month, day ] = currentDate.split(\"-\");\n  month -= 1;\n  const date = new Date(year, month, day);\n  date.setMonth(date.getMonth());\n  date.setDate(date.getDate() + 1);\n  return asDateString(date);\n}\n"],"mappings":"AAAA,MAAMA,UAAU,GAAG,oBAAoB;AACvC,MAAMC,UAAU,GAAG,WAAW;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,IAAI,EAAE;EAC1B,OAAO,GAAGA,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAACF,IAAI,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,EAC9DD,QAAQ,CAAC,EAAE,CAAC,CACZE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIJ,IAAI,CAACK,OAAO,CAAC,CAAC,CAACH,QAAQ,CAAC,EAAE,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AACvE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,YAAYA,CAACC,UAAU,EAAE;EACvC,OAAOA,UAAU,CAACC,KAAK,CAACX,UAAU,CAAC,CAAC,CAAC,CAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,YAAYA,CAACC,UAAU,EAAE;EACvC,OAAOA,UAAU,CAACF,KAAK,CAACV,UAAU,CAAC,CAAC,CAAC,CAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,KAAKA,CAAA,EAAG;EACtB,OAAOZ,YAAY,CAAC,IAAIa,IAAI,CAAC,CAAC,CAAC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,WAAW,EAAE;EACpC,IAAI,CAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAE,GAAGH,WAAW,CAACI,KAAK,CAAC,GAAG,CAAC;EACjDF,KAAK,IAAI,CAAC;EACV,MAAMhB,IAAI,GAAG,IAAIY,IAAI,CAACG,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC;EACvCjB,IAAI,CAACmB,QAAQ,CAACnB,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC;EAC9BH,IAAI,CAACoB,OAAO,CAACpB,IAAI,CAACK,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EAChC,OAAON,YAAY,CAACC,IAAI,CAAC;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASqB,IAAIA,CAACP,WAAW,EAAE;EAChC,IAAI,CAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAE,GAAGH,WAAW,CAACI,KAAK,CAAC,GAAG,CAAC;EACjDF,KAAK,IAAI,CAAC;EACV,MAAMhB,IAAI,GAAG,IAAIY,IAAI,CAACG,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC;EACvCjB,IAAI,CAACmB,QAAQ,CAACnB,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC;EAC9BH,IAAI,CAACoB,OAAO,CAACpB,IAAI,CAACK,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EAChC,OAAON,YAAY,CAACC,IAAI,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}